/**
 * This class does all the functions needed for index.html and index2.html
 * from showing the map, adding and creating new lists and displaying a popup
 * when a destination is reached.
 * 
 * Created by: AA, SK, WG, XZ, LC, KF.
 * Comments/Quality Check: KF, LC, XZ.
 */

// Global variables to control editing
var activeList = "";
var activeListIndex = 0;
/**
 * This method displays a welcome page using a logo then transitions to the 
 * index.html file which is the main index.
 * 
 * @author LC
 * 
 * @returns {undefined}
 */
function initWelcome() {
    $("#welcomeSection").fadeIn(1100, function () {
        $(this).animate({
            top: "0",
            opacity: "0"
        }, 1100, function () {
            location.href = "index.html";
        });
    });
}

/**
 * This method deletes a specific item from the data object. It deletes
 * list and refreshes the page.
 *
 * @author KF
 */
function deleteList() 
{
    data = getDataObject();
    data.splice(activeListIndex, 1);
    updateDataObject(data);
    // Reload page
    location.reload();
}

/**
 * Update active component in navigation bar. If you select a list
 * from the nav bar, you can edit the list contents
 * 
 * @author XZ
 */
$(".nav li").on("click", function () {
    $(".nav li").removeClass("active");
    $(this).addClass("active");
});

/**
 * Once the body is loaded, this function checks browser compatibility with 
 * the local storage. It will display a message with an empty list if no 
 * items have been added. 
 * Will display list name on top if location is selected.
 * 
 * @author WG, SK, AA
 * Verified by: KF
 */
$("body").ready(function () {
    // Check if browser supports local storage!
    if (typeof (Storage) !== "undefined") {
    } else {
        // No Web Storage support..
        alert("Sorry the browser you're using is not supported!\n\
 For the best performance please use Google Chrome browser");
    }
    // Open the generic list as default list
    // var x = document.getElementById('genericList');
    // genericList(x);
    data = getDataObject();

    // display a message if no locations are added
    if (data.length == 0) {

    } else { // hide the message and navigate to the last added list
        document.getElementById('addMessage').style.display = 'none';
        renderSavedLocations();
        changeLocation(data[data.length - 1].Name);
    }

});

/**
 * This method adds the saved locations to the navigation bar by making them
 * a list item. They become clickable objects which when clicked will show
 * the added items corresponding to the list name.
 * 
 * @author WG, SK, AA
 * Verified by: XZ
 */
function renderSavedLocations() {
    // Assign location data to variable
    data = getDataObject();
    // For each location, save it as a clickable item
    // that changes the displayed list when clicked.
    for (var i = 0; i < data.length; i++) {
        var node = document.createElement("LI");
        var a = document.createElement("a");
        a.textContent = data[i].Name;
        a.setAttribute("onClick", "javascript: changeLocation(this.textContent);");
        node.appendChild(a);
        document.getElementById("sLocation").appendChild(node);
    }
}

// Empty list variable, used to reset the content on screen
var emptyList = $("#co").html();


/** This method allows you to change the location from the nav bar.
 * It takes in a location name and displays its contents on screen.
 * It calls the method renderTodoList to impletment this
 *  
 * @param {type} locationName the name of location whoes list the user wishes
 * to alter
 * @author WG, AA, SK
 * Verified by: LC
 */
function changeLocation(locationName) {
    // Assign location data to variable
    data = getDataObject();
    // Active list is the one associated with given location
    activeList = locationName;
    // When a location is selected, the attached list appears 
    // on the screen, and can be edited.
    var displayCurrent = document.getElementById('displayCurrentList');
    displayCurrent.textContent = activeList + " list:";
    activeListIndex = getIndexOfLocation(activeList);
    renderTodoList(data[activeListIndex].List);
}

/** This  function allows the list items to be generated by looping through
 * the data object and printing the list items one by one.
 * It clears the pages if a new list is to be created.
 * 
 * @param {type} list is the list selected for items to be geerated
 * @returns null
 * @author WG, SK, AA
 * Verified by: KF
 */
function renderTodoList(list) {
    // Don't run if to do is empty
    // Reset the table to display another list
    $("#co").html(emptyList);
    if (!list.length)
        return;
    // If there are items in the list
    for (i = 0; i < list.length; i++) {
        // Display items one by one
        addItemToDisplay(list[i]);
    }
}

// Remove list icon in svg format.
var removeSvg = ' <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"  x="0px" y="0px" viewBox="0 0 22 22" style="enable-background:new 0 0 22 22;" xml:space="preserve"><g><g><path class="fill" d="M16.1,3.6h-1.9V3.3c0-1.3-1-2.3-2.3-2.3h-1.7C8.9,1,7.8,2,7.8,3.3v0.2H5.9c-1.3,0-2.3,1-2.3,2.3v1.3    c0,0.5,0.4,0.9,0.9,1v10.5c0,1.3,1,2.3,2.3,2.3h8.5c1.3,0,2.3-1,2.3-2.3V8.2c0.5-0.1,0.9-0.5,0.9-1V5.9    C18.4,4.6,17.4,3.6,16.1,3.6z M9.1,3.3c0-0.6,0.5-1.1,1.1-1.1h1.7c0.6,0,1.1,0.5,1.1,1.1v0.2H9.1V3.3z M16.3,18.7    c0,0.6-0.5,1.1-1.1,1.1H6.7c-0.6,0-1.1-0.5-1.1-1.1V8.2h10.6L16.3,18.7L16.3,18.7z M17.2,7H4.8V5.9c0-0.6,0.5-1.1,1.1-1.1h10.2    c0.6,0,1.1,0.5,1.1,1.1V7z"/></g><g><g><path class="fill" d="M11,18c-0.4,0-0.6-0.3-0.6-0.6v-6.8c0-0.4,0.3-0.6,0.6-0.6s0.6,0.3,0.6,0.6v6.8C11.6,17.7,11.4,18,11,18z"/></g><g><path class="fill" d="M8,18c-0.4,0-0.6-0.3-0.6-0.6v-6.8C7.4,10.2,7.7,10,8,10c0.4,0,0.6,0.3,0.6,0.6v6.8C8.7,17.7,8.4,18,8,18z"/></g><g><path class="fill" d="M14,18c-0.4,0-0.6-0.3-0.6-0.6v-6.8c0-0.4,0.3-0.6,0.6-0.6c0.4,0,0.6,0.3,0.6,0.6v6.8     C14.6,17.7,14.3,18,14,18z"/></g></g></g></svg>';


/**
 *  A method that is triggered when the enter button is pressed to add an 
 *  item/task to the list.  
 * @author XZ
 * @param {type} input, textbox info
 * @param {type} e, the key press
 */

function  enterBtn(input, e) {
    // If "enter" key is pressed...
    if ((e.code === "Enter" || e.code === "NumpadEnter")) {
        // Add the inputed text to the list
        addItemToList(input.value);
    }
}

/**
 * A method that will be triggered when the '+' sign is clicked
 * to add an element to the list
 * @author LC
 */
function addBtnClick() {
    // When "+" sign is clicked, add inputed text to lsit
    addItemToList(document.getElementById("item").value);
}

/**
 * Adds the given list item to local storage.
 * @param {String} item, the item/task taken from the textbox that will be 
 * added to the data object
 * 
 * @author WG, SK, AA
 * Verified by: XZ
 * @returns {undefined}
 */
function addItemToList(item) {
    if (item) { // if the item is not empty
        var data = getDataObject();
        addItemToDisplay(item);
        // empty the text box
        document.getElementById("item").value = "";
        // push the item to the list
        data[activeListIndex].List.push(item);
        updateDataObject(data);
    }
}


/**
 *  This method adds the items/tasks to the page and displays it 
 * @author WG, SK, AA
 * Verified by: LC
 * @param {string} text, the item/task that will be added to the screen
 */
function addItemToDisplay(text) {
    // Create list and item variables
    var list = document.getElementById("todo");
    var item = document.createElement("li");
    item.innerText = text;

    // Create a "delete task" button
    var buttons = document.createElement("div");
    buttons.classList.add("buttons");
    var remove = document.createElement("button");
    remove.classList.add("remove");
    remove.innerHTML = removeSvg;

    // Add click event for removing an item
    remove.addEventListener("click", removeItem);
    buttons.appendChild(remove);
    item.appendChild(buttons);
    list.insertBefore(item, list.childNodes[0]);
}

/**
 *  A method that runs the modal (popup), reads from the data object and 
 *  displays the popup
 * @author WG, SK, AA
 * Verified by: KF
 * @param {type} indexOfLocationMatched, the index of the list that will be used
 *  in the popup
 */
function runCode(indexOfLocationMatched) {
    // Assign location data to variable
    var data = getDataObject();
    text = " ";
    // For each item in the list...
    for (i = 0; i < data[indexOfLocationMatched].List.length; i++) {
        // Add it to the popup
        text += "<br>" + data[indexOfLocationMatched].List[i] + "</br>";
    }
    // Display the popup
    document.getElementById("paragraph").innerHTML = text;
}

/**
 * This method removes a single item from the list,
 *  triggered when the user clicks the trash icon on the page.
 * @author WG, SK, AA
 * Verified by: XZ
 */
function removeItem() {
    // Assign location data to variable
    var data = getDataObject();
    // Assign item, parent, id, and text variables
    var item = this.parentNode.parentNode;
    var parent = item.parentNode;
    var id = parent.id;
    var value = item.innerText;
    // If the object ID is "todo"
    if (id === "todo") {
        // Update the list
        data[activeListIndex].List.splice(data[activeListIndex].List.indexOf(value, 1));
        document.getElementById("item").value = "";
        updateDataObject(data);
    }
    // Remove item from local storage
    parent.removeChild(item);
}

/** 
 * Creates and compiles map methods. 
 * Runs methods and functions inside the map when called.
 * @author SK, WG, AA
 * Verified by: LC
 * @returns {void}
 */
function initMap() {

    // Defining the latitude and longitude of Northwood
    var northwood_latlng = new google.maps.LatLng(44.657286, -63.591899);

    // Defining the map variable and zooming it to 15x when map is 
    // opened, and position is Northwood
    var map = new google.maps.Map(document.getElementById('map'), {
        zoom: 15,
        center: northwood_latlng
    });

    // Defining infowindow
    var infowindow_1 = new google.maps.InfoWindow({
        content: 'NORTHWOOD'
    });

    // defing marker for Northwood and position it on the map
    var marker_1 = new google.maps.Marker({
        position: northwood_latlng,
        map: map,
        title: 'Northwood',
        icon: image
    });
    marker_1.addListener('click', function () {
        infowindow_1.open(map, marker_1);
    });
    // pushing the info window on the defined map and marker
    infowindow_1.open(map, marker_1);

    var window = []; // Define arrays
    var latlng = [];

    renderMarker();

    /** 
     * if the data object is empty, it returns nothing
     * else it runs the for loop
     * Adds/pushes latitude and longitude to the latlng[] array
     * Calls:
     * addMarker()
     * dest_Ination()
     * Most important code as it combines all the map info
     * @author: SK, WG, AA
     * Verified by: KF
     * @returns {}
     */
    function renderMarker() {
        // Assign location data to variable 
        data = getDataObject();
        if (isEmpty())
            return;

        for (var i = 0; i < data.length; i++) {
            latlng.push(new google.maps.LatLng(data[i].Geolocation.lat, data[i].Geolocation.lng));
            // pushes the  addressName to the window array
            window.push(data[i].Name);
            // adds marker on the latlng[index] and 
            // address name on the window array 
            addMarker(latlng[i], window[i]);
            // checks if the users location matches with the 
            // address inputted and outputs the list item in modal form if so.
            dest_Ination(latlng[i]);

        }
    };

    /** 
     * @params{co-ordinates,AddressName}
     * It takes the map co-ordinates and sets the marker on the co-ordinates 
     * and sets the info window to the marker, then clips it to the map.
     * @author: SK, WG, AA
     * Verified by: XZ
     * @returns {co-ordinates, AddressName}
     */
    function addMarker(props, tops) {
        var mark = new google.maps.Marker({ // creating new marker 
            map: map,
            position: props
        });
        var infowindow = new google.maps.InfoWindow({ // creating new infowindow
            content: "<strong>" + tops + "</strong>"
        });
        infowindow.open(map, mark);
    };

    // Variables for info windows and markers
    var infowindow1 = new google.maps.InfoWindow();
    var marker1 = new google.maps.Marker({
        map: map
    });

    /**
     * @param {co-ordinates}
     * Checks if the user's location/co-ordinates
     * is within 100m of the inputted location
     * and pops the list item if so.
     * else
     * provides users lcoation on the map.
     * 
     * @author: SK, WG, AA
     * Verified by: LC
     * @returns {co-ordinates}
     */

    function dest_Ination(pop) {

        if (navigator.geolocation) {
            navigator.geolocation.watchPosition( // google api function to watch user location
                    function (position) {
                        var latLngA = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                        var t = 100;
                        pos = { // current position of user
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };

                        var data = getDataObject();
                        for (var i = 0; i < data.length; i++) {

                            var lo = new google.maps.LatLng(data[i].Geolocation.lat, data[i].Geolocation.lng);
                            var dstBetween = google.maps.geometry.spherical.computeDistanceBetween(latLngA, lo);
                            if (dstBetween < t) { // compute destance betwwen 100m
                                
                                marker1.setAnimation(google.maps.Animation.BOUNCE); // Animates marker
                                marker1.setPosition(pop); // sets marker position
                                marker1.setIcon(image); // sets logo
                                infowindow1.setContent('Destination Reached.'); //creates infowindow 
                                infowindow1.open(map, marker1);
                                runCode(i); // stores list in modal
                                $('#locationModal').modal('show'); // runs modal
                            } else {
                                infowindow1.setPosition(pos);
                                infowindow1.setContent('<strong>' + 'You are Here.' + '</strong>');
                                infowindow1.open(map, marker1);
                                map.setCenter(pos);
                                marker1.setPosition(pos);
                                marker1.setIcon(image);
                            }
                        }
                    },
                    function () {
                        alert("Geolocation not supported!");
                    }
            );
        }
    };

    // User's input into search bar
    var input = document.getElementById('pac-input');

    var autocomplete = new google.maps.places.Autocomplete(input); // calling autocomplete function of googple api
    autocomplete.bindTo('bounds', map); // filters and finds only the places close to the user location

    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Creates info window and map marker
    var infowindow = new google.maps.InfoWindow();
    var infowindowContent = document.getElementById('infowindow-content');
    infowindow.setContent(infowindowContent);
    var marker = new google.maps.Marker({
        map: map
    });
    marker.addListener('click', function () {
        infowindow.open(map, marker);
    });
    /** 
     * When an address is added, it sets markers on the location.
     * Google api "places and Geometry" is used.
     * Creates and compiles map and runs methods and functions inside the map
     * when called.
     * @author: SK, WG, AA
     * Verified by: KF
     * @returns {void}
     */
    autocomplete.addListener('place_changed', function () { // runs function when place added to the input box.
        infowindow.close();
        var place = autocomplete.getPlace(); // calls getplace() function of google "Places" API
        if (!place.geometry) {
            return;
        }
        var mapTextBox = document.getElementById("pac-input").value;
        console.log(mapTextBox);
        // If a location is successfully added, a message will appear
        if (mapTextBox) {
            addNewLocation(place);
            alert("Location added! Click on \"back\" to start editing! or add another location!");
            document.getElementById("pac-input").value = '';
        }
        // Adjust screen to zoom in on location
        if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
        } else {
            map.setCenter(place.geometry.location);
            map.setZoom(17);
        }


        // Set the position of the marker using the place ID and location.
        marker.setPlace({
            placeId: place.place_id,
            location: place.geometry.location
        });
        marker.setVisible(true);

        // Info window content creation
        infowindowContent.children['place-name'].textContent = place.name;
        infowindowContent.children['place-id'].textContent = place.place_id;
        infowindowContent.children['place-address'].textContent = place.formatted_address;
        // Opens info window
        infowindow.open(map, marker);
    });

    var image = {// adding logo as marker and fitting it to size.
        anchor: new google.maps.Point(0, 32),
        origin: new google.maps.Point(0, 0),
        scaledSize: new google.maps.Size(32, 32),
        size: new google.maps.Size(64, 64),
        url: "images/newlogo.png"
    };
    var pos;

};//END oF INNIT MAP FUNCTION------

/**
 * This method updates the data in localStorage with the data passed to it.
 * @author WG, SK, AA
 * Verified by: XZ
 * @param {type} data the new data that will replace what is saved in localStorage.
 */
function updateDataObject(data) {
    localStorage.setItem("data", JSON.stringify(data));
}

/**
 * A getter for the data object saved in localStorage.
 * @author: SK, WG, AA
 * Verified by: LC
 * @returns {Array|Object} the data found in localStorage, if localStorage is empty it 
 * return a new data object
 */
function getDataObject() {
    var data = localStorage.getItem("data");
    if (data == null) {// if empty create a new one..
        var data = [];
        return data;
    } else { // otherwise parse it and return it..
        data = JSON.parse(data);
        return data;
    }
}

/**
 * Checks whether localStorage is empty
 * @author: SK, WG, AA
 * Verified by: KF
 * @returns {Boolean} true if data object exists, false otherwise..
 */
function isEmpty() {
    return data.length == 0;
}

/**
 *  A method that gets the index of the given location, it matches the name 
 *  of the location in the data
 *  object, then returns the index of that location.
 * @author XZ
 * @param {type} name, the name of the location that we will return its index..
 * @returns {undefined|Number} returns the index of the location, otherwise nothing..
 */
function getIndexOfLocation(name) {
    data = getDataObject();
    if (data.length != 0) {
        for (var i = 0; i < data.length; i++) {
            //if the name matches
            if (name == data[i].Name) {
                return i; // return the index
            }
        }
        return;
    }
}

/**
 * This method adds a new location to the data saved in localStorage,
 * First it creates an object that contains the 
 * Name, Geolocation, List (a new empty list) and an address. 
 * Then pushes the object to the data in localStorage
 * @author: SK, WG, AA
 * Verified by: XZ
 * @param {Array object} place An array object that contains details about the place 
 * taken from Google API
 */
function addNewLocation(place) {
    name = place.name;
    address = place.formatted_address;
    geoLocation = place.geometry.location;
    if (!locationExist(name)) { // prevent duplicates from being added
        data = getDataObject();
        var obj = {
            "Name": name,
            "Geolocation": geoLocation,
            "List": [],
            "Address": address
        };
        data.push(obj);
        updateDataObject(data);
    }
}

/**
 * A method that searches in the data saved in localStorage, checks whether the location is 
 * added already in the data or not.
 * @author LC 
 * @param {Stirng} name, the name of the location that will be checked
 * @returns {Boolean} true if the name found and the location exists in the data,
 * false otherwise
 */
function locationExist(name) {
    data = getDataObject();
    if (data.length != 0) {// if data is not empty
        for (var i = 0; i < data.length; i++) {
            //if the name matches
            if (name == data[i].Name) {
                return true;
            }
        }
        return false;
    }
}
   